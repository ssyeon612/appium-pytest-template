name: Android Device App Test

on:
  push:
    branches: [ master ]

jobs:
  android-test:
    runs-on: self-hosted

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Appium
      run: npm install -g appium

    - name: Start Appium Server
      shell: powershell
      run: |
        $appiumPath = "$env:USERPROFILE\AppData\Roaming\npm\appium.cmd"
        Start-Process $appiumPath -ArgumentList "--base-path / --log-level info > appium.log" -WindowStyle Hidden
        Start-Sleep -Seconds 8

    - name: Check Appium Status
      run: curl http://localhost:4723/status

    - name: Show Appium Logs
      run: type appium.log

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install pytest appium-python-client requests pytest-json-report

    - name: Start Godticket App
      run: |
        adb devices
        adb shell am start -n godticket.mobile/godticket.mobile.ui.MainActivity

    - name: Set UTF-8 Encoding
      shell: powershell
      run: |
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8

    - name: Run Appium Pytest
      shell: powershell
      run: |
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        cd "C:\Users\WW\Desktop\workspace\00. src\appium-pytest-template"
        pytest tests/test_login.py --maxfail=1 --disable-warnings -q
        exit $LASTEXITCODE

    - name: Notify Slack
      if: always()
      shell: python
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        import json, os, requests
        from datetime import datetime

        status_emoji = "✅ 성공" if "${{ job.status }}" == "success" else "❌ 실패"

        # 📊 테스트 요약
        summary = {"passed": 0, "failed": 0, "skipped": 0}
        try:
            with open("C:/Users/WW/Desktop/workspace/00. src/appium-pytest-template/summary.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                summary["passed"] = len([t for t in data["tests"] if t["outcome"] == "passed"])
                summary["failed"] = len([t for t in data["tests"] if t["outcome"] == "failed"])
                summary["skipped"] = len([t for t in data["tests"] if t["outcome"] == "skipped"])
        except Exception as e:
            print(f"⚠️ 요약 정보 읽기 실패: {e}")

        summary_text = f"📊 테스트 결과: {summary['passed']} passed / {summary['failed']} failed / {summary['skipped']} skipped"

        # 🕒 빌드 시간
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # 📱 디바이스 정보
        device_info = {"deviceName": "unknown", "platformName": "unknown"}
        try:
            with open("C:/Users/WW/Desktop/workspace/00. src/appium-pytest-template/run_info.txt", "r", encoding="utf-8") as f:
                for line in f:
                    if "=" in line:
                        k, v = line.strip().split("=", 1)
                        device_info[k] = v
        except Exception as e:
            print(f"⚠️ 디바이스 정보 읽기 실패: {e}")

        message = {
            "text": (
                f"{status_emoji}: Android 여신티켓 테스트 완료!\n"
                f"결과: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n"
                f"{summary_text}\n\n"
                f"🕒 빌드 시간: {timestamp}\n"
                f"📱 디바이스: {device_info['deviceName']}\n"
                f"🤖 플랫폼: {device_info['platformName']}"
            )
        }

        res = requests.post(
            os.environ["SLACK_WEBHOOK_URL"],
            headers={"Content-Type": "application/json"},
            data=json.dumps(message)
        )
        print("Slack Webhook response:", res.json())


    - name: Upload Screenshot to Slack (if failed)
      if: failure()
      shell: python
      env:
        SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
      run: |
        import os, glob, requests
        import sys
        sys.stdout.reconfigure(encoding='utf-8')

        file_list = glob.glob("**/screenshots/failure_*.png", recursive=True)
        if not file_list:
            print("❗ No screenshot found")
            exit(0)

        filepath = file_list[0]
        print(f"Uploading screenshot: {filepath}")

        with open(filepath, "rb") as f:
            res = requests.post(
                url="https://slack.com/api/files.upload",
                headers={"Authorization": f"Bearer {os.environ['SLACK_TOKEN']}"},
                files={"file": f},
                data={
                    "channels": os.environ["SLACK_CHANNEL"],
                    "initial_comment": "❌ 테스트 실패 - 실행 스크린샷 첨부",
                    "filename": os.path.basename(filepath),
                },
            )
            print(res.json())



